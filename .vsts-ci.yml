variables:
  deployment: deploy
  nuget: packages
  SUT_nuget: UIAutomationTest\packages

steps:
- task: UsePythonVersion@0
  displayName: 'Setup Python'
  inputs:
    versionSpec: '3.6'
    addToPath: true
    architecture: 'x64'

- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '4.3.0'

- script: |
      nuget restore src\WhiteLibrary\packages.config -PackagesDirectory $(nuget)
  displayName: Download NuGet packages

- script: |
      mkdir UIAutomationTest\packages
      nuget restore UIAutomationTest\packages.config -PackagesDirectory $(SUT_nuget)
  displayName: Download NuGet packages for SUT

- script: |
      pip install -r requirements-dev.txt
  displayName: Install needed components from PyPi

- task: VSBuild@1
  inputs:
    solution: UIAutomationTest\UIAutomationTest.csproj

- task: Bash@3
  inputs:
    targetType: inline
    script: echo $BUILD_BUILDNUMBER >> build.info
  displayName: Generate build.info

- script: |
    set DEPLOYMENT=$(deployment)
    deploy.cmd
  continueOnError: false
  displayName: Copy build artifacts to deployment directory

- script: |
      python -m unittest discover -s src
  displayName: Run Python unit tests

- script: |
      python setup.py install
  displayName: Install WhiteLibrary

- script: |
    set DEPLOYMENT=$(deployment)
    run_tests.cmd --exclude no_ci --xunit xunit.xml
  displayName: Execute Acceptance tests

- task: PublishTestResults@2
  condition: always()
  inputs:
    testRunner: JUnit
    testResultsFiles: output/xunit.xml

- script: |
    flake8 --exit-zero --output flake8.xml --format=junit-xml
  displayName: 'Running Flake8 Static Analysis'
  continueOnError: true

- task: PublishTestResults@2
  condition: always()
  continueOnError: true
  inputs:
    testRunner: JUnit
    testResultsFiles: flake8.xml
    testResultsTitle: Static Analysis Results from Flake8
    testRunTitle: flake8-results
    publishRunAttachments: true
    failTaskOnFailedTests: true

- task: PublishBuildArtifacts@1
  condition: always()
  displayName: Publish Robot Framework logs and results
  inputs:
    PathtoPublish: output
    ArtifactType: container
    TargetPath: ""
    ArtifactName: Robot Test results

- task: PublishBuildArtifacts@1
  displayName: Publish WhiteLibrary
  inputs:
    PathToPublish: $(deployment)
    ArtifactType: container
    TargetPath: ""
    ArtifactName: WhiteLibrary
